<?xml version="1.0" encoding="utf-8"?>
<header name="boost/compute/timer.hpp">
  <namespace name="boost">
    <namespace name="compute">

      <!-- boost::compute::timer -->
      <class name="timer">
        <purpose>A timer</purpose>

        <description>
          <para>
            The <code>timer</code> class represents a timer.
          </para>
          <para>
            For example, to measure the time it takes to transfer a vector of
            data from the host to the device:
          </para>
        </description>

        <!-- timer::timer(queue) -->
        <constructor>
          <parameter name="queue">
            <paramtype>const <classname>command_queue</classname> &amp;</paramtype>
          </parameter>
          <description>
            <para>
              Creates a new timer for <code>queue</code>.
            </para>
          </description>
        </constructor>

        <!-- timer::timer(other) -->
        <constructor>
          <parameter name="other">
            <paramtype>const <classname>timer&lt;T&gt;</classname> &amp;</paramtype>
          </parameter>

          <description>
            <para>
              Creates a new timer object as a copy of <code>other</code>.
            </para>
          </description>
        </constructor>

        <!-- operator=(other) -->
        <copy-assignment>
          <parameter name="other">
            <paramtype>const <classname>timer&lt;T&gt;</classname> &amp;</paramtype>
          </parameter>

          <description>
            <para>
              Copies the timer from <code>other</code>.
            </para>
          </description>
        </copy-assignment>

        <!-- timer::~timer() -->
        <destructor>
          <description>
            <para>
              Destroys the timer object.
            </para>
          </description>
        </destructor>

        <method-group name="public member functions">

          <!-- timer::start() -->
          <method name="start">
            <type>void</type>

            <description>
              <para>
                Starts the timer.
              </para>
            </description>
          </method>

          <!-- timer::stop() -->
          <method name="stop">
            <type>void</type>

            <description>
              <para>
                Stops the timer.
              </para>
            </description>
          </method>

          <!-- timer::is_stopped() -->
          <method name="is_stopped" cv="const">
            <type>bool</type>

            <description>
              <para>
                Returns <code>true</code> if the timer is stopped.
              </para>
            </description>
          </method>

          <!-- timer::elapsed() -->
          <method name="elapsed" cv="const">
            <type>ulong_</type>

            <description>
              <para>
                Returns the elapsed time in nanoseconds.
              </para>
            </description>
          </method>

        </method-group>
      </class>
    </namespace>
  </namespace>
</header>
