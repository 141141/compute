<?xml version="1.0" encoding="utf-8"?>
<header name="boost/compute/future.hpp">
  <namespace name="boost">
    <namespace name="compute">

      <!-- boost::compute::future<T> -->
      <class name="future">
        <purpose>A future</purpose>

        <template>
          <template-type-parameter name="T">
            <purpose>value type</purpose>
          </template-type-parameter>
        </template>

        <description>
          <para>
            The <code>future</code> class represents the result of an
            asynchronous computation.
          </para>
        </description>

        <!-- future::future() -->
        <constructor>
          <description>
            <para>
              Creates a null future.
            </para>
          </description>
        </constructor>

        <!-- future::future(other) -->
        <constructor>
          <parameter name="other">
            <paramtype>const <classname>future&lt;T&gt;</classname> &amp;</paramtype>
          </parameter>

          <description>
            <para>
              Creates a new future object as a copy of <code>other</code>.
            </para>
          </description>
        </constructor>

        <!-- operator=(other) -->
        <copy-assignment>
          <parameter name="other">
            <paramtype>const <classname>future&lt;T&gt;</classname> &amp;</paramtype>
          </parameter>

          <description>
            <para>
              Copies the future from <code>other</code>.
            </para>
          </description>
        </copy-assignment>

        <!-- future::~future() -->
        <destructor>
          <description>
            <para>
              Destroys the future object.
            </para>
          </description>
        </destructor>

        <method-group name="public member functions">

          <!-- future::get() -->
          <method name="get">
            <type>T</type>

            <description>
              <para>
                Returns the result stored in the future. This will block until
                the computation is completed and the result is ready.
              </para>
            </description>
          </method>

          <!-- future::valid() -->
          <method name="valid" cv="const">
            <type>bool</type>

            <description>
              <para>
                Returns <code>true</code> if the future is valid.
              </para>
            </description>
          </method>

          <!-- future::wait() -->
          <method name="wait" cv="const">
            <type>void</type>

            <description>
              <para>
                Blocks until the asynchronous computation is complete.
              </para>
            </description>
          </method>

          <!-- future::get_event() -->
          <method name="get_event" cv="const">
            <type><classname>event</classname></type>

            <description>
              <para>
                Returns the event associated with the future.
              </para>
            </description>
          </method>
        </method-group>
      </class>
    </namespace>
  </namespace>
</header>
