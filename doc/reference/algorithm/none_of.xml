<?xml version="1.0" encoding="utf-8"?>
<header name="boost/compute/algorithm/none_of.hpp">
  <namespace name="boost">
    <namespace name="compute">

      <!-- boost::compute::none_of(first, last, predicate, queue) -->
      <function name="none_of">
        <template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="UnaryPredicate"/>
        </template>

        <type>bool</type>

        <parameter name="first">
          <paramtype>InputIterator</paramtype>
        </parameter>
        <parameter name="last">
          <paramtype>InputIterator</paramtype>
        </parameter>
        <parameter name="predicate">
          <paramtype>UnaryPredicate</paramtype>
        </parameter>
        <parameter name="queue">
          <paramtype>command_queue &amp;</paramtype>
        </parameter>

        <description>
          <para>
            Returns <code>true</code> if <code>predicate</code> returns
            <code>true</code> for none of the elements in the range
            [<code>first</code>, <code>last</code>).
          </para>
          <para>
            See also: <functionname>all_of()</functionname>,
                      <functionname>any_of()</functionname>
          </para>
        </description>
      </function>
    </namespace>
  </namespace>
</header>
