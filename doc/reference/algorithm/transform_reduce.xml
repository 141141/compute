<?xml version="1.0" encoding="utf-8"?>
<header name="boost/compute/algorithm/transform_reduce.hpp">
  <namespace name="boost">
    <namespace name="compute">

      <!-- boost::compute::transform_reduce(first,
                                            last,
                                            transform_function,
                                            init,
                                            reduce_function,
                                            queue) -->
      <function name="transform_reduce">
        <template>
          <template-type-parameter name="InputIterator"/>
          <template-type-parameter name="UnaryTransformFunction"/>
          <template-type-parameter name="T"/>
          <template-type-parameter name="BinaryReduceFunction"/>
        </template>

        <type>T</type>

        <parameter name="first">
          <paramtype>InputIterator</paramtype>
        </parameter>
        <parameter name="last">
          <paramtype>InputIterator</paramtype>
        </parameter>
        <parameter name="transform_function">
          <paramtype>UnaryTransformFunction</paramtype>
        </parameter>
        <parameter name="init">
          <paramtype>T</paramtype>
        </parameter>
        <parameter name="reduce_function">
          <paramtype>BinaryReduceFunction</paramtype>
        </parameter>
        <parameter name="queue">
          <paramtype>command_queue &amp;</paramtype>
        </parameter>

        <description>
          <para>
            Transforms each value in the range [<code>first</code>,
            <code>last</code>) with the unary <code>transform_function</code>
            and then reduces each transformed value and <code>init</code> with
            <code>reduce_function</code>.
          </para>
        </description>
      </function>

      <!-- boost::compute::transform_reduce(first1,
                                            last1,
                                            first2,
                                            transform_function,
                                            init,
                                            reduce_function,
                                            queue) -->
      <function name="transform_reduce">
        <template>
          <template-type-parameter name="InputIterator1"/>
          <template-type-parameter name="InputIterator2"/>
          <template-type-parameter name="BinaryTransformFunction"/>
          <template-type-parameter name="T"/>
          <template-type-parameter name="BinaryReduceFunction"/>
        </template>

        <type>T</type>

        <parameter name="first1">
          <paramtype>InputIterator1</paramtype>
        </parameter>
        <parameter name="last1">
          <paramtype>InputIterator1</paramtype>
        </parameter>
        <parameter name="first2">
          <paramtype>InputIterator2</paramtype>
        </parameter>
        <parameter name="transform_function">
          <paramtype>BinaryTransformFunction</paramtype>
        </parameter>
        <parameter name="init">
          <paramtype>T</paramtype>
        </parameter>
        <parameter name="reduce_function">
          <paramtype>BinaryReduceFunction</paramtype>
        </parameter>
        <parameter name="queue">
          <paramtype>command_queue &amp;</paramtype>
        </parameter>

        <description>
          <para>
            Transforms each value in the range [<code>first1</code>,
            <code>last1</code>) and the range beginning at <code>first2</code>
            with the binary <code>transform_function</code> and then reduces
            each transformed value and <code>init</code> with
            <code>reduce_function</code>.
          </para>
        </description>
      </function>
    </namespace>
  </namespace>
</header>
