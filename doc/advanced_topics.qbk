[section Advanced Topics]

The following topics show advanced features of the Boost Compute library.

[section Custom Functions]

The OpenCL runtime and the Boost Compute library provide a number of built-in
functions such as sqrt() and dot() but many times these are not sufficient for
solving the problem at hand.

The Boost Compute library provides a few different ways to create custom
functions that can be passed to the provided algorithms such as
[funcref boost::compute::transform transform()] and
[funcref boost::compute::reduce reduce()].

The most basic method is to provide the raw source code for a function:

``
boost::compute::function<int (int)> add_four =
    boost::compute::make_function_from_source<int (int)>(
        "add_four",
        "int add_four(int x) { return x + 4; }"
    );

boost::compute::transform(vector.begin(), vector.end(), vector.begin(), add_four);
``

[endsect] [/ custom functions]

[section Complex Values]

While OpenCL itself doesn't natively support complex data types, the Boost
Compute library provides them.

To use complex values first include the following header:

``
#include <boost/compute/complex.hpp>
``

A vector of complex values can be created like so:

``
// create vector on device
boost::compute::vector<std::complex<float> > vector;

// insert two complex values
vector.push_back(std::complex<float>(1.0f, 3.0f));
vector.push_back(std::complex<float>(2.0f, 4.0f));
``

[endsect] [/ complex values]

[section Lambda Expressions]

The lambda expression framework allows for functions and predicates to be
defined at the call-site of an algorithm.

Lambda expressions use the placeholders `_1` and `_2` to indicate the
arguments. The following declarations will bring the lambda placeholders into
the current scope:

``
using boost::compute::lambda::_1;
using boost::compute::lambda::_2;
``

The following examples show how to use lambda expressions along with the
Boost.Compute algorithms to perform more complex operations on the device.

To count the number of odd values in a vector:

``
boost::compute::count_if(vector.begin(), vector.end(), _1 % 2 == 1);
``

To multiply each value in a vector by three and subtract four:

``
boost::compute::transform(vector.begin(), vector.end(), vector.begin(), _1 * 3 + 4);
``

[endsect] [/ lambda expressions]

[section Asynchronous Operations]

A major performance bottleneck in GPGPU applications is memory transfer. This
can be alleviated by overlapping memory transfer with computation. The Boost
Compute library provides the [funcref boost::compute::copy_async copy_async()]
function which performs an asynchronous memory transfers between the host and
the device.

For example, to initiate a copy from the host to the device and then perform
other actions:

``
// data on the host
std::vector<float> host_vector = ...

// create a vector on the device
boost::compute::vector<float> device_vector(host_vector.size());

// copy data to the device asynchronously
boost::compute::future<void> f =
    boost::compute::copy_async(host_vector.begin(),
                               host_vector.end(),
                               device_vector.begin(),
                               queue);

// perform other work on the host or device
// ...

// ensure the copy is completed
f.wait();

// use data on the device (e.g. sort)
boost::compute::sort(device_vector.begin(), device_vector.end(), queue);
``

[endsect] [/ asynchronous operations]

[section Performance Timing]

The [classref boost::compute::timer] class provides a simple way to measure
performance using the event timers on a compute device.

For example, to measure the time to copy a vector of data from the host to the
device:

[import ../example/time_copy.cpp]
[time_copy_example]

[endsect]

[section OpenCL C API Interoperability]

The Boost Compute library is designed to easily interoperate with the OpenCL C
API. All of the wrapped classes have conversion operators to their underlying
OpenCL types which allows them to be passed directly to the OpenCL C functions.

For example,
``
// create context object
boost::compute::context ctx = boost::compute::default_context();

// query number of devices using the OpenCL C API
cl_uint num_devices;
clGetContextInfo(ctx, CL_CONTEXT_NUM_DEVICES, sizeof(cl_uint), &num_devices, 0);
std::cout << "num_devices: " << num_devices << std::endl;
``

[endsect] [/ opencl c api interoperability]

[section Fancy Iterators]
[endsect] [/ fancy iterators]

[section Custom Kernels]
[endsect] [/ custom kernels]

[section Random Values]
[endsect] [/ random values]

[section Malloc Interface]
[endsect] [/ malloc interface]

[section OpenGL Interoperability]
[endsect] [/ opengl interoperability]

[section Type Traits]
[endsect] [/ type traits]

[section Event Profiling]
[endsect] [/ event profiling]

[section Pinned Memory]
[endsect] [/ pinned memory]

[endsect] [/ advanced topics]
